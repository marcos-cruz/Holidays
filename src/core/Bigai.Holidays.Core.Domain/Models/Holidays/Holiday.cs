using Bigai.Holidays.Core.Domain.Enums;
using Bigai.Holidays.Core.Domain.Models.Countries;
using Bigai.Holidays.Shared.Domain.Enums.Entities;
using Bigai.Holidays.Shared.Domain.Models;
using Bigai.Holidays.Shared.Infra.CrossCutting.Helpers;
using System;

namespace Bigai.Holidays.Core.Domain.Models.Holidays
{
    /// <summary>
    /// <see cref="Holiday"/> represents a holiday.
    /// </summary>
    public class Holiday : Entity
    {
        #region Public Properties

        /// <summary>
        /// Id that identifies which country this rule belongs to.
        /// </summary>
        public Guid CountryId { get; private set; }

        /// <summary>
        /// Id that identifies which state this rule belongs to.
        /// </summary>
        public Guid? StateId { get; private set; }

        /// <summary>
        /// Code to identify the city.
        /// </summary>
        public string CityId { get; private set; }

        /// <summary>
        /// Date on which the holiday occurs.
        /// </summary>
        public DateTime HolidayDate { get; protected set; }

        /// <summary>
        /// Type of holiday, which can be: <c>National</c>, <c>Regional</c>, <c>Local</c> and <c>Observance</c>.
        /// </summary>
        public HolidayType HolidayType { get; protected set; }

        /// <summary>
        /// Indicates whether it is an optional holiday.
        /// </summary>
        public bool Optional { get; protected set; }

        /// <summary>
        /// Description of the holiday in the native language, for example, in Brazilian Portuguese.
        /// </summary>
        public string NativeDescription { get; protected set; }

        /// <summary>
        /// Description of the holiday in an alternative language, for example, in English.
        /// </summary>
        public string AlternativeDescription { get; protected set; }

        /// <summary>
        /// Country code, consisting of 3 letters, according to ISO-3166.
        /// </summary>
        public string CountryCode { get; protected set; }

        /// <summary>
        /// State code, consisting of 2 letters, according to ISO-3166.
        /// </summary>
        public string StateCode { get; protected set; }

        /// <summary>
        /// City name.
        /// </summary>
        public string CityName { get; private set; }

        /// <summary>
        /// Code with up to 32 characters, which identifies the city.
        /// </summary>
        public string CityCode { get; protected set; }

        /// <summary>
        /// This key is generated by the system to avoid duplication
        /// </summary>
        public string ComposeKey { get; private set; }

        #endregion

        #region Navigation Properites

        public virtual Country Country { get; private set; }

        #endregion

        #region Constructor

        protected Holiday() { }

        private Holiday(Guid? id, EntityStatus status, ActionType action, Guid? userId, Guid countryId, Guid? stateId, DateTime holidayDate, HolidayType holidayType, bool optional, string nativeDescription, string alternativeDescription, string countryCode, string stateCode, string cityName, string cityCode) : base(id, status, action, userId)
        {
            CountryId = countryId;
            StateId = stateId;
            HolidayDate = holidayDate;
            HolidayType = holidayType;
            Optional = optional;
            NativeDescription = nativeDescription;
            AlternativeDescription = alternativeDescription;
            CountryCode = countryCode;
            StateCode = stateCode;
            CityName = cityName;
            CityCode = cityCode;

            GenerateCityId();
            GenerateComposeKey();
        }

        /// <summary>
        /// Return a instance of <see cref="Holiday"/>.
        /// </summary>
        /// <param name="id">Record identifier. Optional if action equal <c>Register</c>. Required for other actions.</param>
        /// <param name="status">Current status of the entity. Required.</param>
        /// <param name="action">Action to take with entity. Required.</param>
        /// <param name="userId">Who is taking this action. Optional.</param>
        /// <param name="countryId">Identifies which country this rule belongs to. Required.</param>
        /// <param name="stateId">Identifies which state this rule belongs to. Required if stateIsoCode was filled.</param>
        /// <param name="holidayDate">Date the holiday is celebrated. Required.</param>
        /// <param name="holidayType">Holiday range type. Required.</param>
        /// <param name="optional">Indicates whether the holiday is optional.</param>
        /// <param name="nativeDescription">Official holiday name. Required.</param>
        /// <param name="alternativeDescription">English holiday name. Optional.</param>
        /// <param name="countryCode">Country code consisting of 3 letters, according to ISO-3166. Required.</param>
        /// <param name="stateCode">State code, according to ISO-3166. Required if rule is for state.</param>
        /// <param name="cityName">City name. Required if rule is for local holiday.</param>
        /// <param name="cityCode">Official Code of the city. Optional.</param>
        /// <returns></returns>
        public static Holiday CreateHoliday(Guid? id, EntityStatus status, ActionType action, Guid? userId, Guid countryId, Guid? stateId, DateTime holidayDate, HolidayType holidayType, bool optional, string nativeDescription, string alternativeDescription, string countryCode, string stateCode, string cityName, string cityCode)
        {
            return new Holiday(id, status, action, userId, countryId, stateId, holidayDate, holidayType, optional, nativeDescription, alternativeDescription, countryCode, stateCode, cityName, cityCode);
        }

        #endregion

        #region Override

        /// <summary>
        /// Determines whether the specified object instances are considered equal.
        /// </summary>
        /// <param name="other">The object to compare.</param>
        /// <returns><c>true</c> if the objects are considered equal, otherwise, <c>false</c>. If both objects are <c>null</c>,
        /// returns <c>true</c>.</returns>
        protected override bool EqualsCore(object other)
        {
            var holiday = other as Holiday;

            return CountryId == holiday.CountryId &&
                   StateId == holiday.StateId &&
                   CityId == holiday.CityId &&
                   HolidayDate == holiday.HolidayDate &&
                   HolidayType == holiday.HolidayType &&
                   Optional == holiday.Optional &&
                   NativeDescription == holiday.NativeDescription &&
                   AlternativeDescription == holiday.AlternativeDescription &&
                   CountryCode == holiday.CountryCode &&
                   StateCode == holiday.StateCode &&
                   CityName == holiday.CityName &&
                   CityCode == holiday.CityCode;
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Assigns the country id to the current rule holiday.
        /// </summary>
        /// <param name="countryId">Id that identifies the Country.</param>
        public void CreateCountryRelationship(Guid countryId)
        {
            CountryId = countryId;
        }

        /// <summary>
        /// Assigns the state id to the current rule holiday.
        /// </summary>
        /// <param name="stateId">Id that identifies the State.</param>
        public void CreateStateRelationship(Guid stateId)
        {
            StateId = stateId;
        }

        #endregion

        #region Private Methodos

        /// <summary>
        /// Assigns a key to the city, if it is filled.
        /// </summary>
        private void GenerateCityId()
        {
            string baseKey;
            if (CityName.HasValue())
            {
                baseKey = CountryId.ToString();
                if (StateId.HasValue)
                {
                    baseKey += StateId.Value.ToString();
                }
                baseKey += CityName;

                CityId = baseKey.ToMD5HashString();
            }
        }

        /// <summary>
        /// Assigns a key to the composeykey, to avoid duplicity.
        /// </summary>
        private void GenerateComposeKey()
        {
            string baseKey = CountryId.ToString();

            if (StateId.HasValue)
            {
                baseKey += StateId.Value.ToString();
            }

            if (CityId.HasValue())
            {
                baseKey += CityId;
            }

            baseKey += HolidayDate.Year.ToString();
            baseKey += HolidayDate.Month.ToString();
            baseKey += HolidayDate.Day.ToString();
            baseKey += HolidayType.Key.ToString();
            baseKey += NativeDescription;

            ComposeKey = baseKey.ToMD5HashString();
        }

        #endregion
    }
}
